if: repo != head_repo # se qualcuno crea un branch sullo stesso repo e fa un pull request, faccio solo la build del branch e non della pr

_reference_os: &reference_os
                 linux
_reference_arch: &reference_arch
                   amd64
_reference_jdk: &reference_jdk
                  JDK="adopt@1.11"

language: minimal # java altrimenti nada windows

git:
  depth: false # Accepts false or any number representing the commit count, defaults to 50
  autocrlf: input # Prevents git from trying to be smart with line endings

os:
  - *reference_os
  - osx
  - windows

dist: focal # esempio: per scegliere la versione di linux

arch:
  - *reference_arch
  - arm64

env:
  global: # variabili che saranno presenti in tutte le build
    - GRAVIS_REPO="https://github.com/DanySK/Gravis-CI.git" # Convenience variable for shortening commands
    - GRAVIS="$HOME/gravis" # Convenience variable for shortening commands
    - JDK="adopt@1.11.0-8" # Partial versions supported, adopt@1.11 would pull the latest adopt 1.11
    - TERM="dumb"
  matrix: # variabili prese in modo selettivo, questa ci da 6 jdk
    - *reference_jdk
    - JDK="adopt@1.8"
    - JDK="adopt@1.14"
    - JDK="adopt-openj9@1.11"
    - JDK="adopt-openj9@1.8"
    - JDK="adopt-openj9@1.14"

stages:
  - Compile
  - Kotlin Style Check
  - Complete Check
  - name: test # esiste già, se non lo metto check verrebbe eseguito dopo test
    if: 'commit_message !~ /\[\s*skip(?: |-|\.)test\s*\].*/'
  - name: Delivery
    if: repo = MatteoCaval/lss-ci

_reference_machine: &reference_machine
  arch: *reference_arch
  os: *reference_os
  env: *reference_jdk

_workspace_name: &workspace_name
                   compiled_env

_import_workspace: &import_workspace
  workspaces:
    use: *workspace_name

jobs: #usata per indicare condizioni per i quali certi jobs vengono esclusi o aggiunti
  exclude:
    - arch: arm64
      env: JDK="adopt-openj9@1.8"
    - arch: arm64
      env: JDK="adopt-openj9@1.14"
    - <<: *reference_machine # metto qua dentro la cosa puntata da refmachine
      stage: test
  include: # i job messi nell'include fanno override di quelli definiti nel comportamento generale
    - <<: *reference_machine
      stage: Compile
      script: ./gradlew compileKotlin --parallel
      workspaces:
        create:
          name: *workspace_name
          paths:
            - "$TRAVIS_BUILD_DIR"
            - "$HOME./gradle" #qua c'è il wrapper, non dovrei doverlo riscaricare
    - <<: *reference_machine
      stage: Kotlin Style Check
      <<: *import_workspace
      script: ./gradlew detekt ktlintCheck --parallel
    - <<: *reference_machine
      stage: Complete Check
      <<: *import_workspace
      script:
        - travis_retry ./gradlew check
    - stage: Delivery
      script: 'true'
#      roba commentata causa chiavi che non ho generato, tutta roba di delivery e deploy
#      before_script:
#        - openssl ...
#        - export ORG_GRADLE_PROJECT_signignKey=${cat secrets.asc}
#        - rm secret.asc
#      script:
#        - travis_retry ./gradlew publishMavenCentralPlublicationtoMavenRepository
#      after_success:
#        - ./gradlew publishPlugins -Pgradle.publish.key=$PLUGIN_PORTAL_KEY -Pgradle.publish.secret=$PLUGIN_PORTAL_SECTER
      before_deploy:
        - ./gradlew generateVersionFile
        - export VERSION=$(cat build/version)
        - git tag -a $VERSION -m "Version $VERSION"
      deploy:
        - provider: releases # Deploys on GitHub Releases
          file: build/libs/*.jar # Files to deploy
          edge: true # opt in to the new deploy API
          on: # filter
            all_branches: true

before_install:
  - travis_retry git clone --depth 1 $GRAVIS_REPO $GRAVIS # Check out the script set
  - source $GRAVIS/install-jdk # Install the JDK you configured in the $JDK environment variable

install:
  - true # disable install

script:
  - travis_retry ./gradlew test